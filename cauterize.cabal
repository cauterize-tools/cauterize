name:                cauterize
version:             0.1.0.0
synopsis:            Compiler for the Cauterize data description language.
description:
  Cauterize is a data-description language suitable for hard-real-time systems
  and systems without dynamic memory allocation. It can be used instead of other
  data description languages like JSON, XML, or ProtocolBuffers.
homepage:            http://cauterize.info/
license:             BSD3
license-file:        LICENSE
author:              John Van Enk
maintainer:          sw17ch@gmail.com
copyright:           2015, John Van Enk
category:            Language
build-type:          Simple
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  ghc-options:         -Wall -Werror -O2
  build-depends:       base >= 4.7 && < 5,
                       mtl >=2.1,
                       parsec,
                       transformers,
                       cryptohash,
                       QuickCheck >= 2.7,
                       containers,
                       bytestring,
                       wl-pprint-text,
                       text >= 1.2,
                       cereal >= 0.4.1.1,
                       GraphSCC,
                       s-cargot
  default-language:    Haskell2010
  exposed-modules:     Cauterize.CommonTypes,
                       Cauterize.Dynamic,
                       Cauterize.Dynamic.Common,
                       Cauterize.Dynamic.Gen,
                       Cauterize.Dynamic.Meta,
                       Cauterize.Dynamic.Meta.Gen,
                       Cauterize.Dynamic.Meta.Pack,
                       Cauterize.Dynamic.Meta.Pretty,
                       Cauterize.Dynamic.Meta.Types,
                       Cauterize.Dynamic.Meta.Unpack,
                       Cauterize.Dynamic.Pack,
                       Cauterize.Dynamic.Pretty,
                       Cauterize.Dynamic.Types,
                       Cauterize.Dynamic.Unpack,
                       Cauterize.Generate,
                       Cauterize.Hash,
                       Cauterize.Schema,
                       Cauterize.Schema.Checker,
                       Cauterize.Schema.Parser,
                       Cauterize.Schema.Types,
                       Cauterize.Schema.Util,
                       Cauterize.Specification,
                       Cauterize.Specification.Parser,
                       Cauterize.Specification.Compile,
                       Cauterize.Specification.Types

-- `cauterize` is the main entry point into the compiler/converter. This turns
-- schemas into specifications.
executable cauterize
  hs-source-dirs:      bin
  ghc-options:         -Wall -Werror -O2 -threaded -static
  main-is:             Main.hs
  other-modules:       Cauterize.Options
  build-depends:       base,
                       cauterize,
                       text >= 1.2,
                       optparse-applicative >=0.11.0.1
  default-language:    Haskell2010
  other-modules:       Cauterize.Options

test-suite spec
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  ghc-options:         -Wall -Werror -O2 -threaded
  main-is:             Spec.hs
  build-depends:       base,
                       cauterize,
                       hspec,
                       text,
                       bytestring
  default-language:    Haskell2010
  other-modules:
                Cauterize.CommonTypesSpec,
                Cauterize.HashSpec,
                Cauterize.Schema.ParserSpec,
                Cauterize.Specification.ParserSpec,
                Cauterize.Dynamic.PackSpec
